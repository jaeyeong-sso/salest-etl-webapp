<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/batch	http://www.springframework.org/schema/batch/spring-batch.xsd
						http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
						http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
	
	<import resource="spring-hadoop-service.xml" />

	<bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>
	
	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseType" value="mysql" />
 	</bean>
 	
	<!-- create job-meta tables automatically -->
	<jdbc:initialize-database data-source="dataSource">
		<jdbc:script location="classpath:org/springframework/batch/core/schema-drop-mysql.sql" />
		<jdbc:script location="classpath:org/springframework/batch/core/schema-mysql.sql" />
	</jdbc:initialize-database>

	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository"/>
	</bean>

	<bean class="org.springframework.batch.core.scope.StepScope">
        <property name="proxyTargetClass" value="true"/>
    </bean>
	
	
	<!-- ===================================================================================== -->
	<!-- = Transaction Data ETL process -->
	<!-- ===================================================================================== -->
	
	<batch:job id="dailyAggBatchJob" restartable="true" >
	
		<batch:step id="CleanUpHDFS" next="MrJob">
			<batch:tasklet ref="cleanup-tasklet" allow-start-if-complete="true"/>
	    </batch:step>
	    
	    <batch:step id="MrJob" next="CleanUpTable_daily_tr_summary">
	      <batch:tasklet ref="mrjob-tasklet" allow-start-if-complete="true" />
	    </batch:step>

	    <batch:step id="CleanUpTable_daily_tr_summary" next="loadToDB_daily_tr_summary">
	      <batch:tasklet ref="DBCleanUpTaskDailyTrSummary" allow-start-if-complete="true" />
	    </batch:step>
	
		<batch:step id="loadToDB_daily_tr_summary">  
			<batch:tasklet transaction-manager="transactionManager" allow-start-if-complete="true" >  
				<batch:chunk reader="TrDataHdfsFileReader" writer="TrDataDBItemWriter" commit-interval="20"/>  
			</batch:tasklet>  
		</batch:step> 

		<!--
	    <batch:listeners>
	    	<batch:listener>
	    		<bean class="com.salest.etl.adminconsole.batch.DailyTrSumJobExecutionListener"/>
	    	</batch:listener>
	    </batch:listeners>
    	-->
	</batch:job>
	
	
	<bean id="DailyTrSummary" class="com.salest.etl.adminconsole.batch.model.DailyTrSummary" scope="prototype"></bean>  

	<bean id="TrDataHdfsFileReader" class="org.springframework.batch.item.file.MultiResourceItemReader" scope="step" >
		<property name="resources" value="${hd.fs}${daily_tr_agg.output.path}/part-r-00000"/>
		<property name="delegate" ref="TrDataCvsItemReader"/>
	</bean>
	
	<bean id="TrDataCvsItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">   
		<property name="lineMapper">  
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">  
				<property name="lineTokenizer">  
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">  
						<property name="names" value="date,num_of_order,total_amount" />
						<property name="delimiter">
						    <util:constant static-field="org.springframework.batch.item.file.transform.DelimitedLineTokenizer.DELIMITER_TAB"/>
						</property>
					</bean>  
				</property>  
				<property name="fieldSetMapper">     
					<bean class="com.salest.etl.adminconsole.batch.model.DailyTrSummaryFieldSetMapper" />  
				</property>  
			</bean>  
		</property>  
	</bean>     

	<bean id="TrDataDBItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">  
		<property name="dataSource" ref="dataSource" />  
		<property name="sql">  
			<value>  
	            <![CDATA[         
	              INSERT INTO daily_tr_summary(date,num_of_order,total_amount) VALUES (:date,:num_of_order,:total_amount) 
	             ]]>  
			</value>  
		</property>  
 		<!-- It will take care matching between object property and sql name parameter -->  
 		<property name="itemSqlParameterSourceProvider">  
   			<bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />  
  		</property>  
    </bean>  
    
    <bean id="DBCleanUpTaskDailyTrSummary" class="com.salest.etl.adminconsole.batch.DBCleanUpTaskDailyTrSummary">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	
	<!-- ===================================================================================== -->
	<!-- = Menu Data ETL process -->
	<!-- ===================================================================================== -->

	<batch:job id="menuDataETLBatchJob" restartable="true" >
		<batch:step id="loadToDB_menu_code_info">  
			<batch:tasklet transaction-manager="transactionManager" allow-start-if-complete="true" >  
				<batch:chunk reader="MenuDataHdfsFileReader" writer="MenuDataDBItemWriter" commit-interval="10"/>  
			</batch:tasklet>  
		</batch:step> 
	</batch:job>


	<bean id="MenuCodeInfo" class="com.salest.etl.adminconsole.batch.model.MenuCodeInfo" scope="prototype"></bean>  
	
	<bean id="MenuDataHdfsFileReader" class="org.springframework.batch.item.file.MultiResourceItemReader" scope="step" >
		<property name="resources" value="${hd.fs}${menu_code_info.path}"/>
		<property name="delegate" ref="MenuDataCvsItemReader"/>
	</bean>
	
	<bean id="MenuDataCvsItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">   
		<property name="lineMapper">  
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">  
				<property name="lineTokenizer">  
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">  
						<property name="names" value="category, product_code, product_name, price" />
						<property name="delimiter">
						    <util:constant static-field="org.springframework.batch.item.file.transform.DelimitedLineTokenizer.DELIMITER_COMMA"/>
						</property>
					</bean>  
				</property>  
				<property name="fieldSetMapper">     
					<bean class="com.salest.etl.adminconsole.batch.model.MenuCodeInfoFieldSetMapper" />  
				</property>  
			</bean>  
		</property>  
	</bean>  
	
	<bean id="MenuDataDBItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">  
		<property name="dataSource" ref="dataSource" />  
		<property name="sql">  
			<value>  
	            <![CDATA[         
	              INSERT INTO menu_code_info(category, product_code, product_name, price) VALUES (:category, :product_code, :product_name, :price) 
	             ]]>  
			</value>  
		</property>  
 		<!-- It will take care matching between object property and sql name parameter -->  
 		<property name="itemSqlParameterSourceProvider">  
   			<bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />  
  		</property>  
    </bean>  
    
	<bean id="DBCleanUpTaskMenuCodeInfo" class="com.salest.etl.adminconsole.batch.DBCleanUpTaskMenuCodeInfo">
		<property name="dataSource" ref="dataSource"/>
	</bean>


	<!-- ===================================================================================== -->
	<!-- = Join Transaction & MenuCode Data ETL process -->
	<!-- ===================================================================================== -->
	
	<batch:job id="joinTrReceiptMenuCodeJob" restartable="true" >
		
		<batch:step id="PreJoinMrJobCleanUpHDFS" next="JoinMrJob">
			<batch:tasklet ref="cleanup-join-tr-menu-path-tasklet" allow-start-if-complete="true"/>
	    </batch:step>
	
	    <batch:step id="JoinMrJob" next="PreAggByProductMrJob">
	      <batch:tasklet ref="tool-tasklet" allow-start-if-complete="true" />
	    </batch:step>
	    
	    <batch:step id="PreAggByProductMrJob" next="AggByProductMrJob">
			<batch:tasklet ref="cleanup-agg-by-product-mrjob-path-tasklet" allow-start-if-complete="true"/>
	    </batch:step>
	    
	   	<batch:step id="AggByProductMrJob" next="loadToDB_daily_product_tr_summary">
	      <batch:tasklet ref="agg-by-product-mrjob-tasklet" allow-start-if-complete="true" />
	    </batch:step>
	    
	    <batch:step id="loadToDB_daily_product_tr_summary">  
			<batch:tasklet transaction-manager="transactionManager" allow-start-if-complete="true" >  
				<batch:chunk reader="DailyProductTrHdfsFileReader" writer="DailyProductTrDBItemWriter" commit-interval="100"/>  
			</batch:tasklet>  
		</batch:step> 
	  
	</batch:job>
	
	
	<bean id="DailyProductTrSummary" class="com.salest.etl.adminconsole.batch.model.DailyProductTrSummary" scope="prototype"></bean>  
	
	<bean id="DailyProductTrHdfsFileReader" class="org.springframework.batch.item.file.MultiResourceItemReader" scope="step" >
		<property name="resources" value="${hd.fs}${agg_by_product_mrjob.output.path}/part-r-00000"/>
		<property name="delegate" ref="DailyProductTrItemReader"/>
	</bean>
	
	<bean id="DailyProductTrItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">   
		<property name="lineMapper">  
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">  
				<property name="lineTokenizer">  
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">  
						<property name="names" value="date,product_name,product_cate,num_of_product,total_amount" />
						<property name="delimiter">
						    <util:constant static-field="org.springframework.batch.item.file.transform.DelimitedLineTokenizer.DELIMITER_COMMA"/>
						</property>
					</bean>
				</property>  
				<property name="fieldSetMapper">     
					<bean class="com.salest.etl.adminconsole.batch.model.DailyProductTrSummaryFieldSetMapper" />  
				</property>  
			</bean>  
		</property>  
	</bean>  
	
	<bean id="DailyProductTrDBItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">  
		<property name="dataSource" ref="dataSource" />  
		<property name="sql">  
			<value>  
	            <![CDATA[         
	              INSERT INTO daily_product_tr_summary(date,product_name,product_cate,num_of_product,total_amount) VALUES (:date,:product_name,:product_cate,:num_of_product,:total_amount) 
	             ]]>  
			</value>  
		</property>  
 		<!-- It will take care matching between object property and sql name parameter -->  
 		<property name="itemSqlParameterSourceProvider">  
   			<bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />  
  		</property>  
    </bean>  
    
	<bean id="DBCleanUpTaskDailyProductTrInfo" class="com.salest.etl.adminconsole.batch.DBCleanUpTaskDailyProductTrSummary">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
		
	<!-- ===================================================================================== -->
	<!-- = TimeBase Aggregation ETL process -->
	<!-- ===================================================================================== -->

	<batch:job id="timebaseDataETLBatchJob" restartable="true" >
		<batch:step id="PreTimebaseAggMrJobCleanUpHDFS" next="timebaseAggMrJob">
			<batch:tasklet ref="cleanup-timebase-mrjob-path-tasklet" allow-start-if-complete="true"/>
	    </batch:step>
	    <batch:step id="timebaseAggMrJob">
	      <batch:tasklet ref="timebase-mrjob-tasklet" allow-start-if-complete="true" />
	    </batch:step>
	</batch:job>
	
</beans>